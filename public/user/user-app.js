// public/user/user-app.js
document.addEventListener('DOMContentLoaded', () => {
    const page = window.location.pathname;
    const sessionToken = sessionStorage.getItem('sessionToken');
    if (!['/login.html', '/register.html'].includes(page) && !sessionToken) {
        window.location.href = 'login.html';
    }

    if (page.includes('/login.html')) handleLoginPage();
    else if (page.includes('/register.html')) handleRegisterPage();
    else if (page.includes('/dashboard.html')) handleDashboardPage();
    else if (page.includes('/submission.html')) handleSubmissionPage();
    else if (page.includes('/view-submission.html')) handleViewSubmissionPage();
    else if (page.includes('/program-hub.html')) handleProgramHubPage();
});

async function verifyToken(e){const t=await fetch(`/api/verify/${e}`),n=await t.json();t.ok?(sessionStorage.setItem("sessionToken",n.sessionToken),sessionStorage.setItem("currentUser",JSON.stringify(n.user)),window.location.href="dashboard.html"):alert(n.message)}
function handleLoginPage(){document.getElementById("login-form").addEventListener("submit",async e=>{e.preventDefault();const t=await fetch("/api/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e.target.elements["login-email"].value})}),n=await t.json(),o=document.getElementById("login-message");o.classList.remove("hidden"),o.textContent=n.message,t.ok&&n.token&&(o.innerHTML+='<br><strong>Demo Only:</strong> Click to <a href="#" onclick="verifyToken(\''+n.token+"')\">Verify and Login</a>")})}
async function handleRegisterPage(){const e=document.getElementById("register-form"),t=await(await fetch("/api/public/registration-fields")).json();e.innerHTML=t.map(e=>`<label for="${e.fieldKey}">${e.fieldLabel}</label><input type="text" id="${e.fieldKey}" data-key="${e.fieldKey}" name="${e.fieldKey}" required>`).join("")+'<button type="submit" class="button primary-action">Register</button>',e.addEventListener("submit",async e=>{e.preventDefault();const n={},o={};e.target.querySelectorAll("input").forEach(e=>{const r=t.find(t=>t.fieldKey===e.dataset.key);r.isDefault?n[e.dataset.key]=e.value:o[e.dataset.key]=e.value}),await fetch("/api/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({defaultData:n,customData:o})}),alert("Registration successful! Please log in."),window.location.href="login.html"})}
function handleDashboardPage(){document.getElementById("logout-btn").addEventListener("click",()=>{sessionStorage.clear(),window.location.href="login.html"}),loadUserPrograms()}
async function loadUserPrograms(){const e=await(await fetch("/api/my-programs",{headers:{Authorization:sessionStorage.getItem("sessionToken")}})).json(),t=document.getElementById("active-program-list"),n=document.getElementById("upcoming-program-list"),o=document.getElementById("historical-program-list");t.innerHTML="",n.innerHTML="",o.innerHTML="";const r=new Date;e.forEach(e=>{const a=new Date(`${e.startDate}T${e.startTime||"00:00:00"}`),s=new Date(e.endDate),i=`program-hub.html?programId=${e.id}&name=${encodeURIComponent(e.name)}`;a>r?(n.innerHTML+=`<div class="list-item"><div><span>${e.name}</span><small>Starts on ${e.startDate}</small></div>${"participate"===e.accessLevel?'<button class="button" disabled>Access Granted</button>':`<button class="button request-access-btn" data-id="${e.id}">Request Access</button>`}</div>`):s<r?o.innerHTML+=`<a href="${i}" class="list-item"><div><span>${e.name}</span><small>Ended on ${e.endDate}</small></div><span class="arrow">&rsaquo;</span></a>`:"participate"===e.accessLevel?t.innerHTML+=`<a href="${i}" class="program-card"><img src="${e.logoUrl||"https://via.placeholder.com/280x380/2c3e50/ffffff?text=Program"}" alt="${e.name}"></a>`:t.innerHTML+=`<div class="program-card view-only"><img src="${e.logoUrl||"https://via.placeholder.com/280x380/2c3e50/ffffff?text=Program"}" alt="${e.name}"><div class="overlay"><button class="button request-access-btn" data-id="${e.id}">Request Access</button></div></div>`}),document.querySelectorAll(".request-access-btn").forEach(e=>e.addEventListener("click",async t=>{await fetch("/api/request-access",{method:"POST",headers:{"Content-Type":"application/json",Authorization:sessionStorage.getItem("sessionToken")},body:JSON.stringify({programId:t.target.dataset.id})}),t.target.textContent="Requested",t.target.disabled=!0}))}
async function handleProgramHubPage(){const e=new URLSearchParams(window.location.search),t=e.get("programId"),n=e.get("name");if(!t)return void(window.location.href="dashboard.html");document.getElementById("hub-program-name").textContent=n||`Program ${t}`,document.getElementById("create-new-submission-btn").addEventListener("click",()=>{window.location.href=`submission.html?programId=${t}&name=${encodeURIComponent(n)}`});const[o,r]=await Promise.all([fetch("/api/my-submissions",{headers:{Authorization:sessionStorage.getItem("sessionToken")}}).then(e=>e.json()),JSON.parse(sessionStorage.getItem("currentUser"))||{}]),a=o[t],s=document.getElementById("past-submissions-list"),i=document.getElementById("submissions-list-header"),l=r.permissions&&r.permissions.includes("view_all_submissions");if(i.textContent=l?"All Submissions for Program":"Your Past Submissions",!a||0===a.length)return void(s.innerHTML="<p>No submissions found.</p>");s.innerHTML=a.map(e=>{const n=l&&e.userName&&"null null"!==e.userName.trim()?`by <strong>${e.userName}</strong>`:"";const o=e.status||"Submitted";return`<a href="view-submission.html?id=${e.id}" class="list-item"><span>Submission on ${new Date(e.submissionDate).toLocaleString()} ${n}</span><span class="status-badge status-${o.toLowerCase()}">${o}</span></a>`}).join("")}
async function handleSubmissionPage(){const e=new URLSearchParams(window.location.search),t=e.get("programId"),n=e.get("name");if(!t)return void(window.location.href="dashboard.html");document.getElementById("back-to-hub-link").href=`program-hub.html?programId=${t}&name=${encodeURIComponent(n)}`;const o=document.getElementById("submission-form"),r=await(await fetch(`/api/programs/${t}/form`)).json();document.getElementById("submission-program-name").textContent=`Submitting to ${n}`;let a="";r.forEach(e=>{a+=`<div class="form-field-wrapper" id="wrapper-${e.key}"><label for="field-${e.id}">${e.label}</label>`;const t=e.key;"textarea"===e.type?a+=`<textarea id="field-${e.id}" name="${t}" data-field-key="${t}"></textarea>`:"dropdown"===e.type?(a+='<select id="field-'+e.id+'" name="'+t+'" data-field-key="'+t+'"><option value="">--Please choose an option--</option>',a+=e.options?e.options.map(e=>`<option value="${e.value}">${e.label}</option>`).join(""):"",a+="</select>"):a+='<input type="'+e.type+'" id="field-'+e.id+'" name="'+t+'" data-field-key="'+t+'">',a+="</div>"}),a+='<button type="submit" class="button primary-action">Submit</button>',o.innerHTML=a;const s=()=>{const e={};o.querySelectorAll("select, input").forEach(t=>{"dataset"in t&&t.dataset.fieldKey&&(e[t.dataset.fieldKey]=t.value)}),r.forEach(t=>{const n=document.getElementById(`wrapper-${t.key}`);if(t.condition&&t.condition.parentFieldKey){const o=e[t.condition.parentFieldKey]===t.condition.parentAnswerValue;n.classList.toggle("hidden",!o)}if("dropdown"===t.type){const n=document.getElementById(`field-${t.id}`),o=n.value;let a='<option value="">--Please choose an option--</option>';let s=!1;t.options.forEach(t=>{let n=!0;t.condition&&t.condition.parentFieldKey&&(n=e[t.condition.parentFieldKey]===t.condition.parentAnswerValue),n&&(a+=`<option value="${t.value}">${t.label}</option>`,t.value===o&&(s=!0))}),n.innerHTML=a,s&&(n.value=o)}})};r.forEach(e=>{"dropdown"===e.type&&document.getElementById(`field-${e.id}`).addEventListener("change",s)}),s(),o.addEventListener("submit",async e=>{e.preventDefault();const n=new FormData(e.target),o=await fetch(`/api/programs/${t}/submit`,{method:"POST",headers:{Authorization:sessionStorage.getItem("sessionToken")},body:n});o.ok?(alert("Submission successful!"),window.location.href=`program-hub.html?programId=${t}&name=${encodeURIComponent(n)}`):alert("Submission failed. Please try again.")})}
async function handleViewSubmissionPage(){const e=new URLSearchParams(window.location.search),t=e.get("id");if(!t)return void(window.location.href="dashboard.html");const n=await(await fetch(`/api/submission/${t}`,{headers:{Authorization:sessionStorage.getItem("sessionToken")}})).json();if(!n)return void(window.location.href="dashboard.html");const o="Program";document.getElementById("back-to-hub-link").href=`/program-hub.html?programId=${n.programId}&name=${encodeURIComponent(o)}`,document.getElementById("submission-program-name").textContent=`Viewing Submission for Program ${n.programId}`;const r=document.getElementById("submission-details");let a=``;const s=n.status||"Submitted";a+=`<div class="submission-status"><h4>Status: <span class="status-badge status-${s.toLowerCase()}">${s}</span></h4>`,n.status&&"Rejected"===n.status&&n.rejectionReasons&&(a+="<h5>Rejection Reasons:</h5><ul>",n.rejectionReasons.forEach(e=>{a+=`<li>${e}</li>`}),a+="</ul>"),a+="</div>";let i=`Submitted on ${new Date(n.submissionDate).toLocaleString()}`;n.userName&&"null null"!==n.userName.trim()&&(i+=` by ${n.userName}`),a+=`<div class="submission-item"><h4>${i}</h4>`;for(const e in n.answers){const t=n.answers[e];a+='<div class="submission-answer"><strong>'+e+":</strong>","string"==typeof t&&t.startsWith("/uploads/")?a+=`<p><img src="${t}" alt="User upload" class="submission-image"></p>`:a+=`<p>${t}</p>`,a+="</div>"}a+="</div>",r.innerHTML=a}